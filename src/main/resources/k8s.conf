include "application"

purpose = "demo"
purpose = ${?PURPOSE}

akka {
  discovery {
    method = kubernetes-api
    kubernetes-api {
      #The Kubernetes namespace for the Akka Cluster
      #Alternatively, the environment variable NAMESPACE will fill this value.
      pod-namespace = "default"
      #A label all pods that are part of the cluster will have.
      pod-label-selector = "app=sample" # same as the default
      pod-port-name = "management"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api
        # pod port name for Akka Management HTTP
        port-name = "akka-mgmt-http"

        #Wait until there are 3 contact points present before attempting initial cluster formation
        required-contact-point-nr = 3
      }

    }
  }
}

#Akka Remote will also use the host ip for the bind-hostname.
akka.remote.netty.tcp.hostname = ${?HOST_ADDRESS}

#Bind Akka Http and Akka Management listening hosts (keeping default ports).
akka.management.http.bind-hostname = ${?HTTP_BIND_ADDRESS}

#Akka Management and Remote are given the host ip address for identification.
akka.management.http.hostname = ${?HOST_ADDRESS}

#Shutdown if we have not joined a cluster after five minutes.
akka.cluster.shutdown-after-unsuccessful-join-seed-nodes = 300s

akka.coordinated-shutdown.exit-jvm = on

akka.cluster.seed-nodes = []

app {
  envType = "K8S"
}

// Lightbend Telemetry (Cinnamon) Metrics Configuration.
// This has been pre-implemented for the course, and students do not need to adjust these settings.
// For more information: https://developer.lightbend.com/docs/cinnamon/current/home.html
cinnamon {
  akka {
    actors {
      //Report metrics for all user created actors..
      "/user/*" {
        report-by = class
      }
      //Report metrics for all cluster sharding actors.
      "/system/sharding/*" {
        report-by = class
      }
    }

    cluster {
      shard-region-info = on
      node-metrics = on
      domain-events = on
      member-events = on
      singleton-events = on
      shard-region-info = on
      split-brain-resolver-events = on
    }
    remote {
      serialization-timing = on
      failure-detector-metrics = on
    }
    persistence {
      metrics = on
      events = on
    }

    http.servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }

    dispatchers {
      basic-information {
        names = ["*"]
      }
      time-information {
        names = ["*"]
      }
    }
  }

  prometheus {
    exporters += http-server
    http-server {
      host = "0.0.0.0"
      port = 9001
    }
  }
}